pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
--		mineswept
--	a silly implementation of 
--	the classic game minesweeper


--[[	todo

	other bug fixes
	
	cap timer at 999
	>check if that worked

	add acceleration to movement?

--]]

function _init()
	
	fake=true
	
	min_dim=2
	max_dim=32
	
	--	on first load, grid is 8x8
	-- otherwise, it saves settings
	if (g==nil) then
		init_grid(8,8)
	else
		init_grid(g.w,g.h)
	end
	
	mines=flr(g.w*g.h/5)
	
	init_cursor()
	init_menu()
	
	begin_game()
	
		
	xcnt=0
	ocnt=0
	
	tmr1=0
	tmr2=0
	tmr3=0
	
	tmrsecs=0
	
	menu_pos=0
	menu_items=3
	
end


function _update()

	if (btn(‚ùé)) xcnt+=1
	if (btn(üÖæÔ∏è)) ocnt+=1

	if (in_menu) then
	
		update_menu()
	
	else
	
		update_play()
		
	end
	
	
	if (not btn(‚ùé)) xcnt=0
	if (not btn(üÖæÔ∏è)) ocnt=0	
end

function _draw()
	cls(0)
	
	
	if (in_menu) then
	
		draw_menu()
	
	else
	
		draw_play()
	
	end
	
	
	if (gameover) draw_end()
	
	
	draw_overlay()
	
end



--	some button stuff
function btnx()
	return (xcnt>0 and not btn(‚ùé))
end

function btno()
	return (ocnt>0 and not btn(üÖæÔ∏è))
end


function timer()
	tmr1+=1
	
	if (not gameover) tmr2+=1
	
	if (not gameover and not first) tmr3+=1
	
	if (tmr3%30>=29) then
		tmr3=0
		tmrsecs+=1
	end
	
	if (tmrsecs>=999) tmrsecs=999
end
-->8
--	grid


function init_grid(width, height)
	g={}
	
	g.w=width
	g.h=height
	
	
	--	resets the grid
	for i=0,max_dim-1 do
		for j=0,max_dim-1 do
			mset(i,j,0)
		end
	end
	
	
	--	fills the grid with non-
	--	mine tiles
	for i=0,g.w-1 do
		for j=0,g.h-1 do
			mset(i,j,16)
		end
	end
	
end


--	places the amount of mines
--	around the map
function place_mines(cnt)
	stuck=0
	
	
	--	randomly place the mines
	while (cnt > 0) do
		
		--	generates a random position
		pos_x = flr(rnd(g.w))
		pos_y = flr(rnd(g.h))
		
		
		--	checks if that spot is
		--	already a mine
		if (not is_tile(pos_x,pos_y,7) and not (pos_x == c.tx and pos_y == c.ty) and not is_tile(pos_x,pos_y,6) and (not is_tile(pos_x,pos_y,4) or stuck>=999)) then
			mset(pos_x,pos_y,48)
			cnt-=1
			stuck=0
		end
		
		stuck+=1
		
	end
end


--	sets the tile to represent
--	the number of adjacent
--	mines
function place_numbers()
	for i=0,g.w-1 do
		for j=0,g.h-1 do
			
			--	if the tile is not a mine,
			--	place a number
			if (not is_tile(i,j,7)) place_number(i,j)
			
		end
	end
end

--	counts number of mines in
--	adjacent tiles
function place_number(i,j)
	local cnt=0
	
	--	counts each neighbouring
	--	tile
	for di=-1,1 do
		for dj=-1,1 do
			
			if (is_tile(i+di,j+dj,7)) cnt+=1
			
		end
	end

	--	sets the sprite accordingly
	mset(i,j,16+cnt)

end


--	returns the binary count
--	of the tile's first four
--	flags; a number between
--	0 and 8
--	in other words, returns
--	the count of mines
-- surrounding the tile
function get_binary(x,y)
	local v=0
	
	if (is_tile(x,y,0)) v+=1
	if (is_tile(x,y,1)) v+=2
	if (is_tile(x,y,2)) v+=4
	if (is_tile(x,y,3)) v+=8
	
	return v
end



--	checks if a given tile is...
function is_tile(x,y,flag)
	return fget(mget(x,y),flag)
end



function draw_grid()
	
	--[[
	rectfill(-4,-4,g.w*8+3,g.h*8+3,6)
	line(-5,-5,g.w*8+4,-5,5)
	line(-5,-5,-5,g.h*8+4,5)
	
	line()
	line()
	--]]
	
	
	line(-1,-1,g.w*8-1,-1,7)
	line(-1,-1,-1,g.h*8,7)
	
	line(-1,g.h*8,g.w*8,g.h*8,5)
	line(g.w*8,-1,g.w*8,g.h*8,5)
	
	rectfill(0,0,g.w*8-1,g.h*8-1,0)
	
	map(0,0,0,0,128,64)
end



function neighbours(x,y,func)
	for dx=-1,1 do
		for dy=-1,1 do
			if (dx!=0 and dy!=0) func(x+dx,y+dy)
		end
	end
end

function oob(x,y)
	return (x<0 or x>g.w-1 or y<0 or y>g.h-1)
end 

function cnt_neighbours(x,y)
	local cnt=0
	
	for dx=-1,1 do
		for dy=-1,1 do
			if (not oob(x+dx,y+dy) and not (dx==0 and dy==0)) cnt+=1
		end
	end

	return cnt
end


function reveal_neighbours(x,y)
	for dx=-1,1 do
		for dy=-1,1 do
			reveal(x+dx,y+dy)
		end
	end
end
-->8
--	cursor

function init_cursor()
	c={}
	
	c.x=4
	c.y=4
	
	c.tx=0
	c.ty=0
	
end

function update_cursor()

	--	moves the cursor
	if (btn(‚û°Ô∏è)) c.x+=1
	if (btn(‚¨ÖÔ∏è)) c.x-=1
	
	if (btn(‚¨ÜÔ∏è)) c.y-=1
	if (btn(‚¨áÔ∏è)) c.y+=1
	
	
	--	locks cursor to play area
	if (c.x < 3) c.x=3
	if (c.x > g.w*8-4) c.x=g.w*8-4
	
	if (c.y < 3) c.y=3
	if (c.y > g.h*8-4) c.y=g.h*8-4
	
	--	gets the tile that the
	--	cursor is on
	c.tx=flr(c.x/8)
	c.ty=flr(c.y/8)
end


--	reveals the given tile
function reveal(x,y)
	
	-- does not reveal if tile is
	--	already revealed or is flag
	if (is_tile(x,y,6) or is_tile(x,y,5)) then
		
		if (sfxflag) sfx(0)
		
		return
	end
	
	--	does not reveal if tile is
	--	out of bounds
	if (oob(x,y)) return
	
	
	--	if mine
	if (is_tile(x,y,7)) then
		gameover=true
		sfx(1)
	else	--	not mine
		mset(x,y,16+mget(x,y))
		to_revl-=1
		
		if (get_binary(x,y)==0) then
			sfxflag=false
			reveal_neighbours(x,y)
		end
	end
	
end


-- if a revealed tile is
--	clicked and enough adjacent
--	tiles are flagged, then
--	reveal all neighbours
--	this is defined as chording
function cord(x,y)
	
	if (not is_tile(x,y,6)) return
	
	mine_tracker=get_binary(x,y)
	
	-- counts neighbours for flags
	--	and compares it to the
	--	current revealed tile
	
	adj_flags=0
	
	for dx=-1,1 do
		for dy=-1,1 do
			if (not oob(x+dx,y+dy) and not (dx==0 and dy==0) and is_tile(x+dx,y+dy,5)) adj_flags+=1
		end
	end

	
	--	if the counts match, then
	--	reveal all adjacent tiles
	if (mine_tracker==adj_flags) reveal_neighbours(x,y)
	
end



--	flags the given tile
function flag()
	
	--	returns if already revealed
	if (is_tile(c.tx,c.ty,6) or first) then
		sfx(0)
		return
	end
	
	--	if mine
	if (is_tile(c.tx,c.ty,7)) then
		
		--	if flag
		if (is_tile(c.tx,c.ty,5)) then
			mset(c.tx,c.ty,48)
			flags-=1
		else --	not flag
			--	returns if #mines would be
			--	less than zero
			if (mines-flags<=0) return
		
			mset(c.tx,c.ty,51)
			flags+=1
		end
		
	elseif (is_tile(c.tx,c.ty,4)) then	--	fake
	
		--	if flag
		if (is_tile(c.tx,c.ty,5)) then
			mset(c.tx,c.ty,25)
			flags-=1
		else --	not flag
		
			--	returns if #mines would be
			--	less than zero
			if (mines-flags<=0) return
		
			mset(c.tx,c.ty,41)
			flags+=1
		end
	
	else	--	not mine
	
		--	if flag
		if (is_tile(c.tx,c.ty,5)) then
			place_number(c.tx,c.ty)
			flags-=1
		else -- not flag
			--	returns if #mines would be
			--	less than zero
			if (mines-flags<=0) return
	
		
			mset(c.tx,c.ty,49)
			flags+=1
		end

	end
	
end


function draw_cursor()
	spr(3,c.x-3,c.y-3)
	
	--	draws the tile selection
	spr(54,c.tx*8,c.ty*8)
	
end
-->8
--	gameover

function end_game()
	
	reveal_map()

	--	return to menu
	if (btno() and tmr1-tmr2>15) then
		_init()
	end
	
	--	new game, same settings
	if (btnx() and tmr1-tmr2>15) begin_game()
	
end


function reveal_map()
	--	reveals the map
	for i=0,g.w-1 do
	 for j=0,g.h-1 do
	 
	 	--	reveals mines
	 	if (is_tile(i,j,7) and not is_tile(i,j,5)) mset(i,j,50)
	 
	 	--	reveals false flags
	 	if (is_tile(i,j,5) and not is_tile(i,j,7)) mset(i,j,52)
	 
	 end
	end
	
end


function draw_end()

	box(3,126-30,124,122,0,true)

	if (not win) draw_gameover()
	
	if (win) draw_win()
	
	print("press ‚ùé to start a new game",8,126-19)
	print("press üÖæÔ∏è to return to menu",12,126-11)


end

function draw_gameover()
	print("you lose!", 46,126-27,8)
end

function draw_win()
	print("you win!", 46,126-27,8)
end
-->8
--	menu


function init_menu()
	in_menu=true
	help_menu=false
	
	init_grid(g.w,g.h)
	
	min_mines=2
	max_mines=49
	
end


function update_menu()
	
	fake=true
	
	if (btn(üÖæÔ∏è)) fake=false
	
	
	--	begins game
	if (btnx()) then
		in_menu=false
		
		--	places the cursor in the
		--	middle of the screen
		c.x=g.w*4
		c.y=g.h*4
		
		begin_game()
	end
		
	
	--	moves menu cursor ‚¨ÜÔ∏è and ‚¨áÔ∏è
	if (btnp(‚¨ÜÔ∏è)) menu_pos-=1
	if (btnp(‚¨áÔ∏è)) menu_pos+=1
	
	
	--	selects menu item
	if (menu_pos==0) then
		
		if (btnp(‚¨ÖÔ∏è) and g.w>min_dim) then
			g.w-=1
			mines=flr(g.w*g.h/5)
		end
		
		if (btnp(‚û°Ô∏è) and g.w<max_dim) then
			g.w+=1
			mines=flr(g.w*g.h/5)
		end
		
		if ((btnp(‚û°Ô∏è) or btnp(‚¨ÖÔ∏è)) and (g.w<=min_dim or g.w>=max_dim)) sfx(0)
		
	elseif (menu_pos==1) then
	
		if (btnp(‚¨ÖÔ∏è) and g.h>min_dim) then
			g.h-=1
			mines=flr(g.w*g.h/5)
		end
		
		if (btnp(‚û°Ô∏è) and g.h<max_dim) then
			g.h+=1
			mines=flr(g.w*g.h/5)
		end
		
		if ((btnp(‚û°Ô∏è) or btnp(‚¨ÖÔ∏è)) and (g.h<=min_dim or g.h>=max_dim)) sfx(0)
		
		
	else
		
		if (btnp(‚¨ÖÔ∏è) and mines>min_mines) mines-=1
		
		if (btnp(‚û°Ô∏è) and mines<max_mines) mines+=1		
		
		if ((btnp(‚û°Ô∏è) or btnp(‚¨ÖÔ∏è)) and (mines<=min_mines or mines>=max_mines)) sfx(0)
		
	end
	
	
	--	bounds menu cursor
	menu_pos%=menu_items
	
	
	--	bounds mines
	max_mines=mid(2,(g.w-1)*(g.h-1)-1,999)
	if (mines > max_mines) mines=max_mines

	if (mines < min_mines) mines=min_mines	
	
end


function draw_menu()

	print(menu_pos,8,32,8)
	print("width: "..g.w)
	print("height: "..g.h)
	print("mines: "..mines)
	
	draw_titlecard()
	
	draw_menu_items()
	
end

function draw_titlecard()
	
	rectfill(2,14,128-3,128-3,6)
	
	box(5,22,128-6,128-6,0,false)

	spr(64,14,34,13,2)
	
end

function draw_menu_items()

	spacing=16
	tall=8
	
	top=58

	draw_width()
	
	draw_height()
	
	draw_mines()
	
	draw_start_box()
end

function draw_width()
	box(64-7,top,64+7,top+tall,0,false)
	
	
	if (menu_pos==0) then
		print(format(g.w,3),64-5,top+2,8)
	
		spr(96,64-16,top+1,4,1)
		
		print(format(min_dim,1),64-21,top+2,5)
		print(format(max_dim,3),64+19,top+2,5)
		
		print("width",64-46,top+2,5)
	else
		print(format(g.w,3),64-5,top+2,5)
	end
end

function draw_height()
	box(64-7,top+spacing,64+7,top+spacing+tall,0,false)
	
	if (menu_pos==1) then
		print(format(g.h,3),64-5,top+spacing+2,8)
		
		spr(96,64-16,top+1+spacing,4,1)
		
		print(format(min_dim,1),64-21,top+2+spacing,5)
		print(format(max_dim,3),64+19,top+2+spacing,5)
	
		print("height",64-50,top+spacing+2,5)
	else
		print(format(g.h,3),64-5,top+spacing+2,5)
	end
end

function draw_mines()
	box(64-7,top+spacing*2,64+7,top+spacing*2+tall,0,false)

	if (menu_pos==2) then
		print(format(mines,3),64-5,top+spacing*2+2,8)
		
		spr(96,64-16,top+1+spacing*2,4,1)
	
		print(format(min_mines,1),64-21,top+2+spacing*2,5)
		print(format(max_mines,3),64+19,top+2+spacing*2,5)
	
		print("mines",64-46,top+spacing*2+2,5)
	else
		print(format(mines,3),64-5,top+spacing*2+2,5)
	end
end

function draw_start_box()
	box(64-35,top+spacing*3,64+35,top+spacing*3+tall,6,true)
	
	print("press ‚ùé to begin",64-33,top+spacing*3+2,5)
end
-->8
--	play

function begin_game()
	init_grid(g.w,g.h)
	
	first=true
	second=false
	gameover=false
	win=false
	
	sfxflag=true
	
	tmr1=0
	tmr2=0
	tmr3=0
	tmrsecs=0
	
	fx=0
	fy=0
	
	fake_mines=0
	
	flags=0
	
	to_revl=g.w*g.h-mines
end



function play()
	
	sfxflag=true
	
	--	after the first reveal,
	--	place all of the mines
	if (first and btnx()) then
		first=false
		
		false_flag(c.tx,c.ty)
		
		place_mines(mines)
		place_numbers()
	end
	
	if (btnx() and is_tile(c.tx,c.ty,6)) cord(c.tx,c.ty)
	
	if (btnx() and not is_tile(c.tx,c.ty,6)) reveal(c.tx,c.ty)
	
	if (btno()) flag()


	if (to_revl<=0) then
		gameover=true
		win=true
	end

end


--	ensures the player loses on
--	the second move
function fake_play()
	
	--	second move logic
	if (second and btnx() and not is_tile(c.tx,c.ty,6) and not is_tile(c.tx,c.ty,5)) then
		
		fudge=0
		if (not is_tile(c.tx,c.ty,4)) fudge=1
		
		--	places a mine under the
		--	cursor
		mset(c.tx,c.ty,48)
		
		place_fake_mines(fake_mines)
		
		place_mines(mines-fake_mines-fudge)
		
		
		reveal(c.tx,c.ty)
		
	end
	
	
	--	first move logic
	if (first and btnx()) then
		
		fake_mines=rand_low(cnt_neighbours(c.tx,c.ty))
		
		mset(c.tx,c.ty,32+fake_mines)
		
		first=false
		second=true
		
		--	sets neighbours to a
		--	special flag
		false_flag(c.tx,c.ty)
		fx=c.tx
		fy=c.ty
	end

	
	--	can flag
	if (btno()) flag()
	
end


function rand_low(n)
	
	--	ensures number is less
	--	than mines
	local out=1000
	
	--	ensures that the correct
	--	number is returned if all
	--	mines are forced to be
	--	adjacent to first
	if ((g.w*g.h)-cnt_neighbours(c.tx,c.ty)<=1) return mines
	
	while (out>=mines) do
		out=n-flr(sqrt(rnd(n*n)))
	end

	--	uses the square root to
	--	make smaller numbers more
	--	likely
	return out
end


--	ensures that the right amount
--	of mines are placed around
--	the starting tile
function false_flag(x,y)
	
	--	prevents too many
	--	mines from being placed
	for dx=-1,1 do
		for dy=-1,1 do
			if (not (dx==0 and dy==0) and not oob(x+dx,y+dy)) mset(x+dx,y+dy,25)
		end
	end
	
end

function place_fake_mines(fakem)
	--	first counts neighbouring
	--	mines
	
	local fm=fakem
	
	for dx=-1,1 do
		for dy=-1,1 do
			if (is_tile(fx+dx,fy+dy,7)) fm-=1
		end
	end
	
	
	while (fm>0) do
		
		pos_x=flr(rnd(3))-1
		pos_y=flr(rnd(3))-1
		
		if (not (pos_x==0 and pos_y==0) and not is_tile(fx+pos_x,fy+pos_y,7) and not oob(fx+pos_x,fy+pos_y)) then 
			mset(fx+pos_x,fy+pos_y,26)
			fm-=1
		end
	
	end
	
end



function update_play()

		timer()
			
		update_cursor()
			
		if (not gameover) then
			if (fake) fake_play()
			
			if (not fake) play()
		
		end
		
		if (gameover) end_game()
		
end

function draw_play()
	camera()
	rectfill(2,18,125,125,6)
	
	
	--	absolute position draws
	camera(c.x-64,c.y-64)
	draw_grid()
	
	if (not gameover) draw_cursor()
	
	
	--	relative position draws
	camera()
	
end
-->8
--	overlay

function draw_overlay()

	draw_header()
	
	draw_flag_box()
	
	draw_time_box()
	
	draw_background()
	
end

function draw_header()
	rectfill(0,0,128,14,6)
	
	line(1,1,126,1,5)
	line(1,1,1,13,5)
	
	line(1,13,126,13,7)
	line(126,1,126,13,7)
	
	line(1,1,126,1,5)
	line(1,1,1,13,5)
	
	line(2,13,126,13,7)
	line(126,1,126,13,7)
	

end

function draw_flag_box()
	
	box(23,3,37,11,0,false)
	print(format(mines-flags,3),25,5,8)

	box(41,3,49,11,6,true)
	spr(30,41,4)
end

function draw_time_box()
	
	box(125-35,3,125-21,11,0,false)
	print(format(flr(tmrsecs),3),125-33,5,8)

	box(125-48,3,125-39,11,6,true)	
	spr(31,125-47,4)
end


function draw_background()
	rectfill(0,14,128,16,6)
	line(0,14,0,128,6)
	line(0,127,127,127,6)
	line(127,14,127,127,6)
	
	line(1,17,126,17,5)
	line(1,17,1,126,5)
	
	line(2,126,126,126,7)
	line(126,17,126,126,7)
	
end



function format(num,digits)
	out=""..flr(num)
	
	while (#out < digits) do
		out="0"..out
	end
	
	return out
end


function box(x0,y0,x1,y1,bcol,inver)
	rectfill(x0,y0,x1,y1,bcol)
	
	c1=5
	c2=7
	
	if (inver) then
		c1=7
		c2=5
	end
	
	line(x0,y0,x1-1,y0,c1)
	line(x0,y0,x0,y1,c1)
	
	line(x0+1,y1,x1,y1,c2)
	line(x1,y0,x1,y1,c2)

end
__gfx__
00000000750000006666660000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000007d5000006666600000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007007dd500006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770007dd500006666600077000770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700007d500006606660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700007d50006000660000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000775000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777776777777767777777677777776777777767777777677777776777777767777777677777776777777760000000000000000000000000000000000000000
7dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd50000000000000000000000000000885000999900
7dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd50000000000000000000000000088885009975990
7dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd50000000000000000000000000088005009775790
7dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd50000000000000000000000000000005009977990
7dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd50000000000000000000000000000005000999900
7dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd57dddddd50000000000000000000000000000000000000000
65555555655555556555555565555555655555556555555565555555655555556555555565555555655555550000000000000000000000000000000000000000
55555556555555565555555655555556555555565555555655555556555555565555555677777776777777760000000000000000000000000000000000000000
5666666756666667566666675666666756666667566666675666666756666667566666677dddddd5700dddd50000000000000000000000000000000000000000
56666667566dd6675663336756688867566e6e6756611167566ccc6756622267566555677dd885d57d0085d50000000000000000000000000000000000000000
566666675666d6675666636756668867566eee6756611667566c666756666267566555677d8885d57d8005d50000000000000000000000000000000000000000
566666675666d667566336675666686756666e6756666167566ccc6756666267566565677dddd5d57ddd00d50000000000000000000000000000000000000000
56666667566ddd67566333675668886756666e6756611167566ccc6756666267566555677dddd5d57dddd0050000000000000000000000000000000000000000
5666666756666667566666675666666756666667566666675666666756666667566666677dddddd57ddddd050000000000000000000000000000000000000000
67777777677777776777777767777777677777776777777767777777677777776777777765555555655555550000000000000000000000000000000000000000
777777767777777655555556777777767777777600000000000000000000000000000000000000005555555d5555555d00000000000000000000000000000000
7dddddd57dddddd5566666677dddddd5700dddd500000000000000000000000000000000000000005dddddd65dddddd600000000000000000000000000000000
7dddddd57dd885d5566506677dd885d57d0085d500000000009900000099990000000000000000005dddddd75dd885d700000000000000000000000000000000
7dddddd57d8885d5560005677d8885d57d8005d500000000009000000090090000000000000000002ddaadd72d8885d700000000000000000000000000000000
7dddddd57dddd5d5565000677dddd5d57ddd00d500000000000000000090090000000000000000005dd9addf5dddd5df00000000000000000000000000000000
7dddddd57dddd5d5566056677dddd5d57dddd00500000000000000000099990000000000000000002dddddd62aadd5d600000000000000000000000000000000
7dddddd57dddddd5566666677dddddd57ddddd0500000000000000000000000000000000000000001dddddd61a9dddd600000000000000000000000000000000
655555556555555567777777655555556555555500000000000000000000000000000000000000001cc6c6661cc6c66600000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00770000075000777777500077700077000777777500000000777775077000000750007777777500077777750007777777750000000000000000000000000000
00766000765000766666500076650065000766666500000007666650076000000650007666666500076666650007666666650000000000000000000000000000
00766607665000006650000076650065000765000000000076000000076000000650006600000000066500650000006650000000000000000000000000000000
00765666065000006650000076560065000765000000000065000000076000007600076500000000765000650000076500000000000000000000000000000000
00765065065000006650000076565065000766666500000760000000076000006500076500000000765006600000076500000000000000000000000000000000
00765065065000006650000076565065000766666500000666665000076000006500066666650000665006500000066000000000000000000000000000000000
00765065065000006650000076506065000765555500000066666500076076076000766555550007666666000000766000000000000000000000000000000000
00765065065000006650000076506065000765000000000000006500076066065000765000000007655555000000765000000000000000000000000000000000
00765065065000006650000076506565000765000000000000066500076665065000665000000006500000000000665000000000000000000000000000000000
00765065065000006650000076500665000766666500000000065000076666660007650000000076000000000007660000000000000000000000000000000000
00765065065000776666500076500665000766666500007777765000076506650007666666500076000000000007650000000000000000000000000000000000
00765065065000766666500076500665000766666500007666650000076006650006666666500065000000000006650000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007500000000000000000000077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00776500000000000000000000076670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07666500000000000000000000076665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666500000000000000000000076550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00006500000000000000000000075000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
65555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555576
65666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666676
65666666666666666666666555555555555557666777777775666666666666666666666666666777777777566655555555555555766666666666666666666676
65666666666666666666666500000000000007666766666665666666666666666666666666666766666666566650000000000000766666666666666666666676
65666666666666666666666508880888088007666766688565666666666666666666666666666766999966566650880080008880766666666666666666666676
65666666666666666666666508080808008007666768888565666666666666666666666666666769975996566650080080000080766666666666666666666676
65666666666666666666666508080808008007666768866565666666666666666666666666666769775796566650080088800880766666666666666666666676
65666666666666666666666508080808008007666766666565666666666666666666666666666769977996566650080080800080766666666666666666666676
65666666666666666666666508880888088807666766666565666666666666666666666666666766999966566650888088808880766666666666666666666676
65666666666666666666666500000000000007666766666665666666666666666666666666666766666666566650000000000000766666666666666666666676
65666666666666666666666577777777777777666755555555666666666666666666666666666755555555566657777777777777766666666666666666666676
65666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666676
65777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777776
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666
65555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555576
65666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666676
65666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666676
65666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666676
65666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666676
65666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666676
65666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666676
65666666666666666777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777756666666666676
65666666666666666777777776777777765555555655555556555555565555555655555556555555565555555677777776555555565555555656666666666676
6566666666666666677dddddd57dddddd5566666675666666756666667566666675666666756666667566666677dddddd5566666675666666756666666666676
6566666666666666677dddddd57dd885d5566eee67566dd66756666667566dd667566dd667566dd667566dd6677dd885d5566dd6675666666756666666666676
6566666666666666677dddddd57d8885d55666ee675666d667566666675666d6675666d6675666d6675666d6677d8885d55666d6675666666756666666666676
6566666666666666677dddddd57dddd5d556666e675666d667566666675666d6675666d6675666d6675666d6677dddd5d55666d6675666666756666666666676
6566666666666666677dddddd57dddd5d5566eee67566ddd6756666667566ddd67566ddd67566ddd67566ddd677dddd5d5566ddd675666666756666666666676
6566666666666666677dddddd57dddddd5566666675666666756666667566666675666666756666667566666677dddddd5566666675666666756666666666676
65666666666666666765555555655555556777777767777777677777776777777767777777677777776777777765555555677777776777777756666666666676
65666666666666666777777776777777767777777655555556555555565555555677777776555555565555555655555556555555565555555656666666666676
6566666666666666677dddddd57dddddd57dddddd55666666756666667566666677dddddd5566666675666666756666667566666675666666756666666666676
6566666666666666677dddddd57dd885d57dd885d55663336756666667566dd6677dd885d5566dd667566dd667566dd667566dd6675666666756666666666676
6566666666666666677dddddd57d8885d57d8885d556666367566666675666d6677d8885d55666d6675666d6675666d6675666d6675666666756666666666676
6566666666666666677dddddd57dddd5d57dddd5d556633667566666675666d6677dddd5d55666d6675666d6675666d6675666d6675666666756666666666676
6566666666666666677dddddd57dddd5d57dddd5d55663336756666667566ddd677dddd5d5566ddd67566ddd67566ddd67566ddd675666666756666666666676
6566666666666666677dddddd57dddddd57dddddd55666666756666667566666677dddddd5566666675666666756666667566666675666666756666666666676
65666666666666666765555555655555556555555567777777677777776777777765555555677777776777777767777777677777776777777756666666666676
65666666666666666777777776777777767777777655555556555555565555555655555556555555565555555655555556555555565555555656666666666676
6566666666666666677dddddd57dddddd57dddddd556666667566666675666666756666667566666675666666756666667566666675666666756666666666676
6566666666666666677dd885d57dd885d57dd885d5566eee6756666667566dd6675663336756633367566dd667566dd667566dd667566dd66756666666666676
6566666666666666677d8885d57d8885d57d8885d55666ee67566666675666d66756666367566663675666d6675666d6675666d6675666d66756666666666676
6566666666666666677dddd5d57dddd5d57dddd5d556666e67566666675666d66756633667566336675666d6675666d6675666d6675666d66756666666666676
6566666666666666677dddd5d57dddd5d57dddd5d5566eee6756666667566ddd675663336756633367566ddd67566ddd67566ddd67566ddd6756666666666676
6566666666666666677dddddd57dddddd57dddddd556666667566666675666666756666667566666675666666756666667566666675666666756666666666676
65666666666666666765555555655555556555555567777777677777776777777767777777677777776777777767777777677777776777777756666666666676
65666666666666666777777776555555567777777655555556555555565555555655555556777777765555555655555556777777765555555656666666666676
6566666666666666677dddddd5566666677dddddd5566666675666666756666667566666677dddddd556666667566666677dddddd55666666756666666666676
6566666666666666677dd885d5566888677dd885d5566333675666666756666667566333677dd885d5566eee67566333677dd885d5566dd66756666666666676
6566666666666666677d8885d5566866677d8885d5566663675666666756666667566663677d8885d55666ee67566663677d8885d55666d66756666666666676
6566666666666666677dddd5d5566688677dddd5d5566336675666666756666667566336677dddd5d556666e67566336677dddd5d55666d66756666666666676
6566666666666666677dddd5d5566888677dddd5d5566333675666666756666667566333677dddd5d5566eee67566333677dddd5d5566ddd6756666666666676
6566666666666666677dddddd5566666677dddddd5566666675666666756666667566666677dddddd556666667566666677dddddd55666666756666666666676
65666666666666666765555555677777776555555567777777677777776777777767777777655555556777777767777777655555556777777756666666666676
65666666666666666755555556555555565555555655555556555555565555555655555556777777767777777655555556555555565555555656666666666676
656666666666666667566666675666666756666667566666675666666756666667566666677dddddd57dddddd556666667566666675666666756666666666676
656666666666666667566dd66756633367566dd667566dd667566666675699d667566eee677dd885d57dd885d5566eee6756633367566dd66756666666666676
6566666666666666675666d667566663675666d6675666d667566666675696d6675666ee677d8885d57d8885d55666ee67566663675666d66756666666666676
6566666666666666675666d667566336675666d6675666d667566666675666d67756666e677dddd5d57dddd5d556666e67566336675666d66756666666666676
656666666666666667566ddd6756633367566ddd67566ddd6756666667566ddd77566eee677dddd5d57dddd5d5566eee6756633367566ddd6756666666666676
656666666666666667566666675666666756666667566666675666666756666667566666677dddddd57dddddd556666667566666675666666756666666666676
65666666666666666767777777677777776777777767777777677777776777777777777777655555556555555567777777677777776777777756666666666676
65666666666666666755555556555555565555555655555556555555565555555677777776555555565555555677777776555555565555555656666666666676
6566666666666666675666666756666667566666675666666756666667566666777dddddd556666667566666677dddddd5566666675666666756666666666676
656666666666666667566dd667566dd667566dd6675666666756666667566333777dd885d556688867566161677dd885d556633367566dd66756666666666676
6566666666666666675666d6675666d6675666d6675666666756666667566663677d8885d556686667566111677d8885d5566663675666d66756666666666676
6566666666666666675666d6675666d6675666d6675666666756666667566336677dddd5d556668867566661677dddd5d5566336675666d66756666666666676
656666666666666667566ddd67566ddd67566ddd675666666756666667566333677dddd5d556688867566661677dddd5d556633367566ddd6756666666666676
6566666666666666675666666756666667566666675666666756666667566666677dddddd556666667566666677dddddd5566666675666666756666666666676
65666666666666666767777777677777776777777767777777677777776777777765555555677777776777777765555555677777776777777756666666666676
65666666666666666755555556777777765555555655555556555555565555555677777776777777765555555655555556555555567777777656666666666676
656666666666666667566666677dddddd5566666675666666756666667566666677dddddd57dddddd55666666756666667566666677dddddd556666666666676
656666666666666667566dd6677dd885d556633367566dd667566dd667566eee677dd885d57dd885d5566eee67566dd667566333677dd885d556666666666676
6566666666666666675666d6677d8885d5566663675666d6675666d6675666ee677d8885d57d8885d55666ee675666d667566663677d8885d556666666666676
6566666666666666675666d6677dddd5d5566336675666d6675666d66756666e677dddd5d57dddd5d556666e675666d667566336677dddd5d556666666666676
656666666666666667566ddd677dddd5d556633367566ddd67566ddd67566eee677dddd5d57dddd5d5566eee67566ddd67566333677dddd5d556666666666676
656666666666666667566666677dddddd5566666675666666756666667566666677dddddd57dddddd55666666756666667566666677dddddd556666666666676
65666666666666666767777777655555556777777767777777677777776777777765555555655555556777777767777777677777776555555556666666666676
65666666666666666755555556555555565555555677777776555555565555555677777776777777765555555655555556555555565555555656666666666676
6566666666666666675666666756666667566666677dddddd556666667566666677dddddd57dddddd55666666756666667566666675666666756666666666676
656666666666666667566dd667566dd667566333677dd885d556633367566eee677dd885d57dd885d556633367566dd667566333675663336756666666666676
6566666666666666675666d6675666d667566663677d8885d5566663675666ee677d8885d57d8885d5566663675666d667566663675666636756666666666676
6566666666666666675666d6675666d667566336677dddd5d55663366756666e677dddd5d57dddd5d5566336675666d667566336675663366756666666666676
656666666666666667566ddd67566ddd67566333677dddd5d556633367566eee677dddd5d57dddd5d556633367566ddd67566333675663336756666666666676
6566666666666666675666666756666667566666677dddddd556666667566666677dddddd57dddddd55666666756666667566666675666666756666666666676
65666666666666666767777777677777776777777765555555677777776777777765555555655555556777777767777777677777776777777756666666666676
65666666666666666755555556555555565555555655555556555555567777777655555556555555565555555655555556777777765555555656666666666676
65666666666666666756666667566666675666666756666667566666677dddddd5566666675666666756666667566666677dddddd55666666756666666666676
6566666666666666675666666756666667566dd66756633367566161677dd885d556688867566eee6756633367566dd6677dd885d5566dd66756666666666676
65666666666666666756666667566666675666d66756666367566111677d8885d5566866675666ee67566663675666d6677d8885d55666d66756666666666676
65666666666666666756666667566666675666d66756633667566661677dddd5d55666886756666e67566336675666d6677dddd5d55666d66756666666666676
6566666666666666675666666756666667566ddd6756633367566661677dddd5d556688867566eee6756633367566ddd677dddd5d5566ddd6756666666666676
65666666666666666756666667566666675666666756666667566666677dddddd5566666675666666756666667566666677dddddd55666666756666666666676
65666666666666666767777777677777776777777767777777677777776555555567777777677777776777777767777777655555556777777756666666666676
65666666666666666755555556555555565555555655555556777777767777777655555556777777765555555655555556555555565555555656666666666676
656666666666666667566666675666666756666667566666677dddddd57dddddd5566666677dddddd55666666756666667566666675666666756666666666676
6566666666666666675663336756633367566dd667566dd6677dd885d57dd885d5566eee677dd885d5566eee67566eee67566eee675663336756666666666676
65666666666666666756666367566663675666d6675666d6677d8885d57d8885d55666ee677d8885d55666ee675666ee675666ee675666636756666666666676
65666666666666666756633667566336675666d6675666d6677dddd5d57dddd5d556666e677dddd5d556666e6756666e6756666e675663366756666666666676
6566666666666666675663336756633367566ddd67566ddd677dddd5d57dddd5d5566eee677dddd5d5566eee67566eee67566eee675663336756666666666676
656666666666666667566666675666666756666667566666677dddddd57dddddd5566666677dddddd55666666756666667566666675666666756666666666676
65666666666666666767777777677777776777777767777777655555556555555567777777655555556777777767777777677777776777777756666666666676
65666666666666666777777776777777765555555655555556555555565555555655555556555555567777777677777776555555567777777656666666666676
6566666666666666677dddddd57dddddd55666666756666667566666675666666756666667566666677dddddd57dddddd5566666677dddddd556666666666676
6566666666666666677dd885d57dd885d5566dd667566dd6675663336756633367566eee67566eee677dd885d57dd885d5566eee677dd885d556666666666676
6566666666666666677d8885d57d8885d55666d6675666d66756666367566663675666ee675666ee677d8885d57d8885d55666ee677d8885d556666666666676
6566666666666666677dddd5d57dddd5d55666d6675666d667566336675663366756666e6756666e677dddd5d57dddd5d556666e677dddd5d556666666666676
6566666666666666677dddd5d57dddd5d5566ddd67566ddd675663336756633367566eee67566eee677dddd5d57dddd5d5566eee677dddd5d556666666666676
6566666666666666677dddddd57dddddd55666666756666667566666675666666756666667566666677dddddd57dddddd5566666677dddddd556666666666676
65666666666666666765555555655555556777777767777777677777776777777767777777677777776555555565555555677777776555555556666666666676
65666666666666666755555556555555565555555655555556555555565555555655555556777777765555555655555556555555567777777656666666666676
656666666666666667566666675666666756666667566666675666666756666667566666677dddddd55666666756666667566666677dddddd556666666666676
6566666666666666675663336756633367566dd667566666675666666756666667566dd6677dd885d5566eee6756633367566eee677dd885d556666666666676
65666666666666666756666367566663675666d6675666666756666667566666675666d6677d8885d55666ee67566663675666ee677d8885d556666666666676
65666666666666666756633667566336675666d6675666666756666667566666675666d6677dddd5d556666e675663366756666e677dddd5d556666666666676
6566666666666666675663336756633367566ddd67566666675666666756666667566ddd677dddd5d5566eee6756633367566eee677dddd5d556666666666676
656666666666666667566666675666666756666667566666675666666756666667566666677dddddd55666666756666667566666677dddddd556666666666676
65666666666666666767777777677777776777777767777777677777776777777767777777655555556777777767777777677777776555555556666666666676
65666666666666666555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555556666666666676
65666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666676
65666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666676
65666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666676
65666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666676
65777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777776
66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666

__gff__
0000000000000080000000000000000000010203040506070810900000002000404142434445464748303000000000208f2f0faf2f404040000080a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0002000000000110501105011050110500000000040000300002000000020000200002000020002b4002b4002b4002b4002a4002a400000000400000000000000000000000000000000000000000000000000000
00030000336513365133651336513265131641306412f6412d6312d6312b6312962126621216211e6211461109611026110000100001000010000100001000010000100001000010000100001000010000100001
